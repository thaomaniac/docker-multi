#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# Copyright (c) 2024 thaomaniac  <thaomaniac@gmail.com>
#-------------------------------------------------------------------------------

set -e

## Uncomment it for debugging purpose
###set -o errexit
#set -o pipefail
#set -o nounset
#set -o xtrace

#
# VARIABLES
#
_bold=$(tput bold)
_underline=$(tput sgr 0 1)
_reset=$(tput sgr0)

_purple=$(tput setaf 171)
_red=$(tput setaf 1)
_green=$(tput setaf 76)
_tan=$(tput setaf 3)
_blue=$(tput setaf 38)

#
# HEADERS & LOGGING
#
function _debug() {
  if [[ "$DEBUG" = 1 ]]; then
    "$@"
  fi
}

function _arrow() {
  printf '➜ %s\n' "$@"
}

function _success() {
  printf '%s✔ %s%s\n' "$_green" "$@" "$_reset"
}

function _error() {
  printf '%s✖ %s%s\n' "$_red" "$@" "$_reset"
}

function _warning() {
  printf '%s➜ %s%s\n' "$_tan" "$@" "$_reset"
}

function _underline() {
  printf '%s%s%s%s\n' "$_underline" "$_bold" "$@" "$_reset"
}

function _bold() {
  printf '%s%s%s\n' "$_bold" "$@" "$_reset"
}

function _die() {
  _error "$@"
  exit 1
}

function _printUsage() {
  echo -n "Docker Xdebug tools
Version $VERSION

./scripts/$(basename "$0") [OPT] [ARG]...

    Options:
        enable | on                 Enable Xdebug.
        disable | off               Disable Xdebug.
        status                      List all Xdebug status.

    Examples:
      Disable Xdebug for PHP 7.2
        ./scripts/$(basename "$0") disable
        or
        ./scripts/$(basename "$0") php72 disable

      Enable Xdebug for PHP 7.3
        ./scripts/$(basename "$0") enable php73
"
  exit 1
}

function initDefaultArgs() {
  script_path=$(realpath "$0")
  script_dir=$(dirname "$script_path")
  dkc_dir=$(dirname "$script_dir")

  XDEBUG_STATUS=
}

function processArgs() {
  initDefaultArgs

  case $1 in
  php*)
    APP_PHP="$1"
    COMMAND="$2"
    ;;
  enable | disable | status | on | off)
    COMMAND="$1"
    if [[ "$2" ]]; then
      APP_PHP="$2"
    fi
    ;;
  *)
    _printUsage
    ;;
  esac

  PHP_INI_LOCATION="${dkc_dir}/config/php/${APP_PHP}/custom.ini"
  if [[ -z "$APP_PHP" ]]; then
    APP_PHP='php'
    PHP_INI_LOCATION="${dkc_dir}/config/php/custom.ini"
  fi
}

function restartPhpService() {
  _arrow "Reload service \"${APP_PHP}\""
  docker compose restart "${APP_PHP}" || _die "${APP_PHP} cannot reload."
}

function statusXdebug() {
  if [[ $(docker compose exec ${APP_PHP} php -i | grep xdebug) ]]; then
    _arrow "Service \"${APP_PHP}\" - Xdebug status: Enabled"
    XDEBUG_STATUS=1
  else
    _arrow "Service \"${APP_PHP}\" - Xdebug status: Disabled"
    XDEBUG_STATUS=0
  fi
}

function enableXdebug() {
  statusXdebug
  if [[ $XDEBUG_STATUS == 1 ]]; then
    _warning "Xdebug is currently Enabled, no need to do anything" && exit
  fi

  sed -i 's/;zend_extension=xdebug/zend_extension=xdebug/g' "$PHP_INI_LOCATION" || _die "Cannot change Xdebug setting"
  sed -i 's/;zend_extension = xdebug/zend_extension = xdebug/g' "$PHP_INI_LOCATION" || _die "Cannot change Xdebug setting"

  _success "Xdebug enabled for \"${APP_PHP}\""
  restartPhpService
}

function disableXdebug() {
  statusXdebug
  if [[ $XDEBUG_STATUS == 0 ]]; then
    _warning "Xdebug is currently Disabled, no need to do anything" && exit
  fi

  sed -i 's/zend_extension=xdebug/;zend_extension=xdebug/g' "$PHP_INI_LOCATION" || _die "Cannot change Xdebug setting"
  sed -i 's/zend_extension = xdebug/;zend_extension = xdebug/g' "$PHP_INI_LOCATION" || _die "Cannot change Xdebug setting"

  _success "Xdebug disabled for \"${APP_PHP}\""
  restartPhpService
}

function checkPhpServiceRunning() {
  if [[ ! $(docker compose ps --services --filter "status=running" | grep -E "\b${APP_PHP}\b") ]]; then
    _error "Service \"${APP_PHP}\" is not running" && exit 1
  fi
}

function doAction() {
  case $COMMAND in
  enable | on)
    enableXdebug
    ;;
  disable | off)
    disableXdebug
    ;;
  status)
    statusXdebug
    ;;
  *)
    _printUsage
    ;;
  esac
}

export LC_CTYPE=C
export LANG=C

DEBUG=0
_debug set -x #on
VERSION="1"

function main() {

  [[ $# -lt 1 ]] && _printUsage

  processArgs "$@"

  checkPhpServiceRunning

  doAction
  exit 0
}

main "$@"

_debug set +x #off
